---
import FullscreenButton from "./FullscreenButton.astro";
import CameraButton from "./CameraButton.astro";

interface Props {
  messagesCount: number;
}

const { messagesCount } = Astro.props;
---

<div
  data-messages-count={messagesCount}
  id="toolbar"
  class="owl:border-l owl:border-stone-700 fixed right-40 top-0 z-50 flex -translate-y-full transform rounded-xl bg-stone-800 text-stone-100 opacity-10 transition-all font-aside text-xs hover:opacity-100"
>
  <button id="back-button" class="px-20 py-8">
    <div class="flex items-center justify-center">
      <p class="uppercase">Back</p>
    </div>
  </button>
  <CameraButton />
  <FullscreenButton />
  <button id="next-button" class="px-20 py-8">
    <div class="flex items-center justify-center">
      <p class="uppercase">Next</p>
    </div>
  </button>
</div>

<style>
  .toolbar-shown {
    transform: translateY(50%);
  }
</style>

<script>
  import { $currentExhibitIdx } from "../currentExhibitIdx";

  const toolBar = document.getElementById("toolbar");
  const messagesCount = toolBar?.dataset.messagesCount;

  // Observation for Intro
  const introObserverCallback = (entries: IntersectionObserverEntry[]) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        toolBar?.classList.remove("toolbar-shown");
      } else {
        toolBar?.classList.add("toolbar-shown");
      }
    });
  };
  const introObserver = new IntersectionObserver(introObserverCallback, {
    threshold: 0.5,
  });
  const introTarget = document.getElementById("intro");
  if (introTarget) {
    introObserver.observe(introTarget);
  }

  // Observation for Exhibits
  const exhibitTargets = [
    ...Array(parseInt(messagesCount ? messagesCount : "0")).keys(),
  ].map((idx) => {
    return document.getElementById(`exhibit-${idx}`);
  });
  const exhibitObserverCallback = (entries: IntersectionObserverEntry[]) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        $currentExhibitIdx.set(parseInt(entry.target.id.slice(8)));
      }
    });
  };
  const exhibitObserver = new IntersectionObserver(exhibitObserverCallback, {
    threshold: 0.5,
  });
  exhibitTargets.forEach((target) => {
    if (target) {
      exhibitObserver.observe(target);
    }
  });

  // Add event listeners to back and next buttons
  const backButton = document.getElementById("back-button");
  const nextButton = document.getElementById("next-button");
  backButton?.addEventListener("click", () => {
    const currentExhibitIdx = $currentExhibitIdx.get();

    if (currentExhibitIdx === 0) {
      introTarget?.scrollIntoView({ behavior: "smooth" });
    } else {
      exhibitTargets[currentExhibitIdx - 1]?.scrollIntoView({
        behavior: "smooth",
      });
    }
  });
  nextButton?.addEventListener("click", () => {
    exhibitTargets[$currentExhibitIdx.get() + 1]?.scrollIntoView({
      behavior: "smooth",
    });
  });
</script>
