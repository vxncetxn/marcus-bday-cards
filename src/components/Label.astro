---
import type { CollectionEntry } from "astro:content";
import { Icon } from "astro-icon/components";

interface Props {
  index: number;
  message: CollectionEntry<"messages">;
}

const { index, message } = Astro.props;
---

<div
  id={`label-${index}`}
  class={`cursor-pointer [contain:size_layout_style] z-30 absolute left-1/2 top-1/2 h-[6vw] w-[10vw] transform bg-white p-[0.5vw] transition-transform duration-500 ease-[cubic-bezier(0.32,0,0.67,0)] ${message.data.image.type === "portrait" ? "translate-x-[calc(10vw*1.45+1vw)] translate-y-[calc(13.33vw*1.45-100%)]" : "translate-x-[calc(15vw*1.45+1vw)] translate-y-[calc(11.25vw*1.45-100%)]"}`}
>
  <div
    class="small-content flex h-full w-full flex-col justify-between opacity-100 transition-opacity duration-500 ease-[cubic-bezier(0.32,0,0.67,0)]"
  >
    <p class="font-bold font-aside text-sm leading-4 capsize">
      {message.data.title}
    </p>
    <div class="flex flex-col gap-[0.5vw]">
      <p class="self-end italic font-aside text-xs capsize">2024</p>
      <p class="self-end font-aside text-xs capsize">
        {message.data.image.focalLength}mm f/{message.data.image.aperture}
        {message.data.image.shutterSpeed}
      </p>
    </div>
  </div>
  <div
    class="expanded-content absolute left-0 top-0 h-[39vw] w-[65vw] origin-top-left scale-[0.154] transform bg-white p-40 opacity-0 transition-all duration-500 ease-[cubic-bezier(0.32,0,0.67,0)]"
  >
    <div class="flex flex-col">
      <p class="font-bold font-aside text-5xl leading-4 capsize">
        {message.data.title}, <span class="italic">2024</span>
      </p>
      <p class="mt-40 font-aside text-3xl capsize">
        {message.data.image.focalLength}mm f/{message.data.image.aperture}
        {message.data.image.shutterSpeed}
      </p>
      <p class="mt-80 font-sans text-xl capsize">
        {message.body}
      </p>
    </div>
    <button
      class="close-label-button absolute left-0 top-0 flex -translate-y-[calc(100%+1vw)] transform select-none items-center gap-8 rounded-md border border-stone-100 px-12 py-4 uppercase text-stone-100 font-aside capsize"
      >Close <Icon name="x" class="size-20" is:inline /></button
    >
  </div>
</div>

<style>
  .label-expanded {
    transform: translate(-50%, -50%) scale(6.5);
    cursor: default;
  }

  .label-expanded > .small-content {
    opacity: 0;
  }

  .label-expanded > .expanded-content {
    opacity: 100;
  }
</style>

<script define:vars={{ index }} is:inline>
  const main = document.getElementById("main");
  const toolBar = document.getElementById("toolbar");
  const overlay = document.getElementById(`overlay-${index}`);
  const label = document.getElementById(`label-${index}`);
  const closeLabelButton = label?.querySelector(".close-label-button");

  label?.addEventListener("click", () => {
    main?.classList.add("disable-scroll");
    toolBar?.classList.remove("toolbar-shown");
    overlay?.classList.add("overlay-present");
    setTimeout(() => {
      overlay?.classList.add("overlay-shown");
    }, 0);
    label?.classList.add("label-expanded");
  });
  overlay?.addEventListener("click", () => {
    toolBar?.classList.add("toolbar-shown");
    overlay?.classList.remove("overlay-shown");
    setTimeout(() => {
      overlay?.classList.remove("overlay-present");
      main?.classList.remove("disable-scroll");
    }, 500);
    label?.classList.remove("label-expanded");
  });
  closeLabelButton?.addEventListener("click", (event) => {
    event.stopPropagation();
    toolBar?.classList.add("toolbar-shown");
    overlay?.classList.remove("overlay-shown");
    setTimeout(() => {
      overlay?.classList.remove("overlay-present");
      main?.classList.remove("disable-scroll");
    }, 500);
    label?.classList.remove("label-expanded");
  });
</script>
